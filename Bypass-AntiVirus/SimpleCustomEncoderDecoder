Address Hex dump Command
0040A770 . B8 00104000 MOV EAX,00401000
0040A775 8000 13 ADD BYTE PTR DS:[EAX],13
0040A778 . 8030 0F XOR BYTE PTR DS:[EAX],0F
0040A77B 8000 37 ADD BYTE PTR DS:[EAX],37
0040A77E . 40 INC EAX
0040A77F . 3D 6FA74000 CMP EAX,0040A76F
0040A784 .^ 7E EF JLE SHORT 0040A775


Explanation of the Custom Encoder

1) First the base (beginning) address is moved into the EAX register.
2) Then it adds 13 to the byte which EAX is pointing to.
3) XOR (Exclusive OR) the byte with 0F which EAX is pointing to.
4) Add 37 to the byte which EAX is pointing to.
5) Increase EAX to point to the next byte.
6) Compare EAX with our ending address.
7) If our ending address hasn’t been reached, jump to (2).


With our custom encoder implemented we’re almost done. It should be noted, that we could also
use other opcodes too, to encode our .text section. Such opcodes could be: sub, or, and, etc

----------------------------
Altering the Encoder to a Decoder

Our initial encoder added 13 to the byte which EAX pointed to, then it XOR’d it with 0F and
added 37 to end with. Now we need to reverse this, by deducting -37 to start with and then -13.

We will still use the add opcode and of course xor, but we’ll only need to change the values as
mentioned previously
