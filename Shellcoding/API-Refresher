APIs are functions like send(), recv() and connect(). 
Each group of functions is written inside a library. 
These libraries are written into files with extension (.dll). 
Every library specializes in a type of function like: winsock.dll is for network APIs like send() or recv(). 
And user32.dll is for windows APIs like MessageBoxA() and CreateWindow().

And kernel32.dll is for the core windows APIs. 
It has APIs like LoadLibrary() which loads any other library. 
And GetProcAddress() which gets the address of any API inside a library loaded in the memory.


So, to reach any API, you must get the address of the kernel32.dll in the memory and have the ability 
to get any API inside it.

While any application is being loaded in the memory, 
the Windows loads beside it the core libraries like kernel32.dll and ntdll.dll and saves the
addresses of these libraries in a place in memory called Process Environment Block (PEB). 
So, we will retrieve the address of kernel32.dll from the PEB.

mov eax,dword ptr fs:[30h]
mov eax,dword ptr [eax+0Ch]
mov ebx,dword ptr [eax+1Ch]
mov ebx,dword ptr [ebx]
mov esi,dword ptr [ebx+8h]  

The first line gets the PEB address from the FS segment register. 
And then, the second and third line gets the PEB->LoaderData->InInitializationOrderModuleList.

The InInitializationOrderModuleList is a double linked list that contains the whole loaded modules (PE Files) 
in memory (like kernel32.dll, ntdll.dll and the application itself) with the imagebase,
entrypoint and the filename of each one of them.

The first entry that you will see in InInitializationOrderModuleList is ntdll.dll. 
To get the kernel32.dll, you must go to the next item in the list. 
So, in the fourth line, we get the next item with ListEntry->FLink.
And at last, we get the imagebase from the available information about the DLL in the 5th line.



Source: https://www.codeproject.com/Articles/325776/The-Art-of-Win32-Shellcoding
