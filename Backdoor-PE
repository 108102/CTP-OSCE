Let's focus on code caves:

1) Find a section that gives me enough space to enter backdoor code 
    + Use a tool like Cave Miner or something to do this.
    + Make sure Executable and Writable permissions are enabled on this.
    
Let's say we're backdooring a program that has user interaction as "Login here: "

2) find the string 

3) Note the instructions in that area. and remember to note the next instruction address.

3) Change the instruction to JMP to your code cave

4) Save the state of the registeres prior to calling the shellcode {Make sure AD is first}
pushad
pushfd

5) Execute the instructions above and note the value of ESP. We'll use this to realign our stack later.

6) Generate reverse shell using msfvenom

7) 
    - Normally reverse TCP shellcode tries to connect to the handler given number of times.
        if the connection fails it closes the process by calling a ExitProcess API call.

    The problem is if the connection handler fails, the executution of the applciation will stop,
       changing a few lines of the shellcodes assembly now will make it to where whenever the connection fails:
        + shellcode will still retry to connect to the handler
        + size of the shellcode is decreased!
    
To fix this, make necessary changes inside assembly code.
    Original categories:
        - try_connect:
        - handle_failure:
        - failure:
        - connected:
    New assembly code:
        - try_connect:
        - connected:
        
8) Compile this with nasm -f bin stager_reverse_tcp_nx.asm

Although the TCP shellcode is ready to use, it will not be placed directly.
The goal is executing the shellcode on a new thread.
In order to create a new thread instance, there needs to be another shellcode that makes a CreateThread API call
    that is pointing to reverse TCP shellcode.

You can use https://github.com/rapid7/metasploit-framework/blob/master/external/source/shellcode/windows/x86/src/single/createthread.asm

    - Why? 
        - It has to do with synchronous vs. asynchronous communications. 
        - If you are embedding a reverse shell in an executable, you are going to freeze up that process
          while your shell has a connection. Not too stealthy when you try to open notepad and 
          it hangs while the hacker is planting things on your system. 
        - Creating the new thread allows the current hi-jacked system to continue while the nefarious stuff 
          continues elsewhere.


9) Place your shellcode inside createthread.asm file in hex format.

10) Assemble it: nasm -f bin createthread.asm

Now our shellcode is ready to be inserted into our executable.
BEFORE! we do that, remember to encode your shellcode to bypass the static/signature analysis mechanism of AV products.

11) encode your shellcode.

    - Tip:
         After each encoding process uploading the encoded shellcode to virus total in 
         raw format and checking the detection score is suggested. 
         Try every combination until it gets undetected.
         
12) Print the encoded createthread shellcode in hex format using: xxd -ps createthread
    - OR: Open the shellcode with a hex editor and copy the hex values.
    
 13) Paste your encoded createthread shellcode in hex format.

14) Align the stack:
    Old ESP - New ESP = 0xXX
    ADD ESP, 0xXX

15) Restore the register values we saved prior to executing our shellcode: (IN THIS ORDER)
    popfd
    popad

16) Enter the instruction that you ovewrote for this hijack.

17) Return back to the function that redirected the execution to the cave with inserting JMP < > instruction.

18) Using PE Editor, you can preserve authenticity of the file by fixing the final file checksum.
     + Basic PE Header Information
        - Checksum: 


Read more: https://pentest.blog/art-of-anti-detection-2-pe-backdoor-manufacturing/
