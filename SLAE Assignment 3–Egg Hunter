Source: https://h0mbre.github.io/SLAE_Egg_Hunter/#

The first thing we want to do is store our ‘egg’ in a register.

    mov ebx, 0x50905090

Next we will clear the ecx, eax, and edx registers. 
The opcode mul will multiply its operand against the eax register and store the result in eax and edx, 
so in this case it’s being multiplied by 0 and storing 0 in both eax and edx. 
This saves us a line of code. 
How MUL works: https://c9x.me/x86/html/file_module_x86_id_210.html

   xor ecx, ecx
   mul ecx
    
First Function, page_forward:

The first function we build into the code will be to increment 1 page in the event that 
we hit a page that is inaccessible to us (al = 0xf2).

By using a bitwise logical or, we’re able to make sure we increment by multiples of 4095 ensuring 
that we don’t skip a page.

    page_forward:
    or dx, 0xfff


Second Function, address_check:

Next we need to increment edx by one to get us to a nice multiple of 4096. 
We will also push our register values onto the stack with pushad in order to preserve them as we make syscalls.

We will then satisfy the const char *pathname argument for the access syscall in ebx by loading 
the effective address of [edx]+4. This will check to see if these bytes are readable to us.

The [edx] is new for us, I believe. The brackets just mean to go to that address in memory. 
In our code, we’re going to the location in memory of edx then moving forward 4 additional bytes, 
and then loading that address into ebx with the lea opcode.
LEA OPCODE: https://c9x.me/x86/html/file_module_x86_id_153.html

    address_check:
    inc edx
    pushad
    lea ebx, [edx +4]
    mov al, 0x21
    int 0x80
    
    
Compare Op Code
https://c9x.me/x86/html/file_module_x86_id_35.html

The compare CMP opcode takes two operands and subtracts them, 
if the result is a 0 the zero-flag is set and you know that the two operands are equal.

We will compare the return code of the accept and restore the registers by popping them off of the stack 
since we’re done with the syscall. 
If al is the same as 0xf2, then we know we got an EFAULT and this page of memory is 
inaccessible to us and we JMP to our page_forward function to skip to the next page

If the memory page is readable to us, we will compare the value of what is stored at edx with ebx which holds our egg. If it does not match, we will JMP to our address_check function and keep reading through the page.

If the value of what is stored at edx matches our egg, then we have to see if [edx]+4 also does so that we satisfy our double-egg requirement. If it is only found once, then it’s probably just our egg-hunter finding itself.

Finally, both CMP calls result in zeros then we tell the code to JMP to edx which will execute the code stored there (our real payload).


    cmp al, 0xf2
    popad
    jz page_forward
    
    cmp [edx], ebx
    jnz address_check
    
    cmp [edx+4], ebx
    jnz address_check
    
    jmp edx
