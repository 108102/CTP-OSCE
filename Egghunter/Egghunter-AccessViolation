- Look at the memory dump where this violation occured.
- If you look closely, you’ll note that although we see the start of our shellcode (prefaced by “PWNDPWND”) 
the shellcode is not intact, which is what caused our exploit to crash. 
This corrupted version of our shellcode is the first to appear in memory and the Egghunter is 
not smart enough to know the difference — it’s only designed to execute the instructions after the first “PWNDPWND” it finds. 
An Egghunter exploit might still be possible, provided our shellcode resides intact somewhere in memory.

We can use mona to find out: !mona find -s "PWNDPWND"

The first two entries marked as “[Stack]” both appear in the previous screenshot and both are corrupted 
versions of our shellcode. That leaves the third entry from the Heap. Double-click that entry to view it in memory. 

Perfect, it’s intact. But how do we get our otherwise “dumb” Egghunter to skip the first two corrupted entries 
in memory and execute the third? We have a few choices.

1) Change the offset to the shellcode
2) Change the starting memory page of the Egghunter search 

--------

1) Change the Shellcode Offset 

One of the simplest methods of addressing this problem is to “push” the shellcode further into 
memory so the early copies are never made and (hopefully) the first copy the Egghunter reaches is intact.
This time the offset pushed the shellcode far enough into our buffer so that no corrupted copies were 
placed on the stack and only the intact copy from the heap remains. 



offset = A * 5000
exploit = Junk + EIP + egghunter + offset + egg + nops + shell

2) Change the Starting Memory Page of the Egghunter
If we can predict where the corrupted copies are going to reside, 
we can simply tell the Egghunter to start looking after those memory addresses. 
This could probably be done any number of ways, but for this demo I’ll use an existing register and the ADD instruction. 

From the previous mona search, we know both corrupted copies reside at 0x0012F1AC and 0x0012F31C 
so all we need to do is start our Egghunter after these addresses. 
To do so, we need to change the value of ebx before the first memory page is loaded.

Launch the exploit as-is and pause execution at the very beginning of the the Egghunter routine to examine the stack. 
Specifically, look at ESP.
We need to start beyond 0x0012F31C. 
Subtract ESP from that and you get: 0x190 or 400 decimal. 
Therefore we can load EDX with ESP and then add at 400+ to EDX to push the starting memory page beyond the corrupted shellcode.
An updated version of the Egghunter is below. Note I had to break up the ADD EDX instruction to avoid NULLs.  
