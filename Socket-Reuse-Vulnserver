Vulnserver:

Source: https://purpl3f0xsec.tech/2019/09/04/Vulnserver-KSTET-Socket-Reuse.html

when making a TCP connection, the server has to set up the socket.

The binding and listening occurs on a per-port basis, which is why this exploit is a socket reuse,
and not just making a new socket, because that would mean opening up a new port.

Once the socket and connection is established, programs can call send() or recv() to exchange data. 

Recv() will accept incoming data and write it somewhere to memory.

The goal of this exploit is to invoke the recv() syscall, 
pass in the proper parameters to reuse Vulnserver’s socket, 
and then send a second-stage payload that won’t get truncated because 
it doesn’t need to overflow the KSTET command (which is what I suspect is truncating the first payload).

Start:

1) Restart executable, pause at the entry point. Scroll down/up until you see the recv() syscall.
          + CALL <JMP.&32_32.recv>
  Looks like it’s part of WS2_32, which makes sense.

2) Set a breakpoint here and run the program. 
    Once you send your exploit. The breakpoint was hit, and the stack contained the parameters I needed:
              Socket = C8
              Buffer = 003E4C60
              BufSize = 1000 (4096. )
              Flags = 0
              
3) We can use Windows Docs to learn more about the function: https://docs.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-rec
              	Socket = The socket descriptor
                Buffer = the location in memory that this incoming data will be written to
                BufSize = the allocated space for the incoming data
                Flags = Flags that can influence the behavior of the socket. None are set here.

These need to be pushed on the stack at the time that we make our own call to recv().

Problems:
            - the 0 we need for the flags parameter. 
                We can’t use null bytes in shellcode so that has to be pushed using other techniques.
            - Socket descriptor will change every time the program is run, 
                so it can’t be hard-coded in the exploit. We have to find a way to dynamically find out what it is and reuse it.

4) Double click the instruction where recv() is and note the address. (CALL 0040252C)

Running the program, it seems that the parameters passed to recv() are no longer on the stack, overwritten by the
overflow, so we need to manually push everything back onto the stack.

5) Restart executable in Immunity, scroll back down to the call to recv(), and analyze:
          + Assembly and the registers

           - MOV DWORD PTR SS:[ESP], EAX
                      move the doubleword in EAX into ESP as a pointer to a memory address.
                      Look at EAX at this point in time, it equals 0x000000C8.
                      This is what we saw for the socket descriptor
                      
             - MOV EAX, DWORD PTR:SS[EBP-420]
                      Move the doubleword that is at the address stored in EBP - 0x420 bytes. 
                      Looking at EBP, it’s pointing to 0x123FFB4. 
                      Subtracting 0x420 gets me 0x123FB94. I look at that address in the stack: This is 0x000000C8.
                      
                      This way, no matter what the socket descriptor is, I can always find it and use it.
                 
 6) Since this address can also change, it’s time to do a little math. 
 Sitting at the top of the A buffer we want to note where ESP currently sits: 0123FA0C.
0x123FB94 - 0x0123FA0C = 0x188 Bytes.

7) Start building the assembly in Immunity to get the opcodes:
        + PUSH ESP          - Put the value of ESP on thes tack
        + POP EAX           - Put that value into EAX
        + ADD AX, 0x188     - Add 0x188 to get EAX to equal the address of the socket descriptor
        

8) Remember,stack grows towards lower addresses. Right now, ESP is at a higher address than the stager we’re building.
We risk stepping all over the stager if we start pushing stuff on the stack now.
We need to adjust ESP so that it’s at an address well below the stager.
        + SUB EAX, 0x64
        
 This should work. The way the stager is being built, it’s growing into higher memory, 
 so the stager shouldn’t step onto where we’ve just put ESP either. Now we’re ready to go.


9) First arg to push is the flags arg. It’s set to 0, but we can’t use nulls in shellcode, 
so we’ll just take advantage of a register that we’re not using right now by changing it to 0 and 
pushing it onto the stack. The easiest way to 0 out anything is to XOR it against itself:
        XOR EBX, EBX
        PUSH EBX

10) The next is “BufSize”. Shellcode should only be around 350~ish bytes, so we don’t need much. 
Let’s just use a round 1024 bytes, which is 0x400 in hex. 
To get around using nulls, we can just manipulat the “high end” of BX like so:

BH represents the 2nd byte in the EBX register, so by adding 4 to that, 
it’s increased to 0x00000400 without having to use nulls.

        	ADD BH, 4
	        PUSH EBX
          
11) Next arg to be set is the address where we want this payload to go. 
Again, hard-coding isn’t an option, and we also want to make sure execution will be passed to the second payload. 
The easiest thing to do is to is calculate the distance look at where the A buffer ends, 
look at ESP, and figure out the difference.

ESP at this point is at 0x123F9A0. 
The last A in my buffer is at 0x0123FA07. 
My last A is 0x67 bytes away from ESP. 
Wanting to keep the stack an even number though, I just settle 0x64 byes:
	      PUSH ESP - put the value of ESP on the stack
	      POP EBX - take that value OFF the stack and put it into EBX
	      ADD EBX, 0x64 - increase the value by 0x64
      	PUSH EBX - put that value onto the stack


11) Only the socket descriptor is left. We can push that with a single instruction, 
but it’s not as simple as PUSH EAX. 
EAX holds 0x0123FB94. If we PUSH that, the stack will have 0x0123FB94 on it. 
The socket descriptor is 0x000000C8 though. So we use:
        	PUSH DWORD PTR DS:[EAX]

This means “push the doubleword that is at the memory address 0x0123FB94 onto the stack”

Recall that recv() is at 0x0040252C. 
We can’t just put this in the shellcode because the null will terminate the rest of the payload, 
but there’s a way around this:
      	MOV EAX, 0x40252C90 - Move this value into EAX. This is our address minus the 00 at the front, and a NOP added on the end for padding.
	      SHR EAX, 8 - shift the EAX register RIGHT by 8 bits. This will remove the 90 on the end, and add a 00 on the front.
      	CALL EAX - make the syscall to recv()


At this point, our stager is complete. All of the arguments are on the stack, in the right order, 
and we’re invoking recv(), which will take any additional buffer we send and write it into memory, a
t a location of our choosing. 

12) You can get the opcodes by highlighting all the assembly, right-clicking, and chosing “Binary Copy”. 
Don’t do “Copy to clipboard”, that copies the addresses, opcodes, and assembly.

13) At the bottom, place a sleep statement that pauses for 5 seconds before sending the second stage. 
This is just to make sure that the first stage executes and recv() is waiting for our buffer.
        time.sleep(5)
        
14)         






          
