1. Abusing non-ASLR enabled libraries
        - Programmers make mistakes, to make full use of ASLR, all loaded libraries need to be supporting it. If a single module doesn’t you can make use of it by finding search that library for the needed instruction to jump to your shellcode.

2. Partial EIP overwrite
        - Since you control EIP, you also control how much of EIP you want to overwrite. As already mentioned, ASLR only randomizes the higher two bytes, what if you can make use of that and only overwrite the lower 2 bytes?

         - Example: DLL is loaded at 0xAABB0000, if you overwrite only the lower two bytes (thanks to small endianness) you can basically control EIP to jump anywhere in 0xAABB0000 to 0xAABBXXY.
         
         
2.1 Single byte overwrite
          - Sometimes a character gets appended to your string, for example a null byte. This will mess up with the previous technique as when you try to overwrite the lower 2 bytes of EIP it becomes 0xAA00XXYY instead of 0xAABBXXYY.
          - Although this limits the possibility of finding a proper instruction, you might still be able to get away with a single byte.
  
           Search in 0xAABB0000 to 0xAABB00FF for possible instructions that can be used to land you your shellcode. 256 combinations aren’t a lot so good luck with that.
           
3. Bruteforcing address space
          - Since we know that only the 2 higher bytes are randomized, what if we try to bruteforce all the possible combination? This method is risky (might crash the service), slow and adds a lot of overhead.

Source: https://www.abatchy.com/2017/06/exploit-dev-101-bypassing-aslr-on.html

------------------------------------------------------
ASLR Bypass Strategy:
    - Stack
           + Leak one address
           + Calculate the distance between the leaked one and the one with your ineterest 
                * BUFFER_ADDRESS - LEAKED_ADDRESS = OFFSET
           + Leak one address in your exploit
                 * LEAKED_ADDRESS + OFFSET = LEAKED_ADDRESS
           + Calculate the OFFSET from the core dump!
Library:
           + ldd first
                 * Open that library with gdb
                 * Print functions!
                 * Prints offset
Attacking Library
           + Attacking Library
                 * Leak one library address
                 * Find what is the base address (LEAK is BASE + SOME_OFFSET)
                 * Calculate SYSTEM (LEAK – SOME_OFFSET + SYSTEM_OFFSET)
                 
Source: https://cand.unexploitable.systems/l/lab04/W4L2.pdf
------------------------------------------------------




          
          
